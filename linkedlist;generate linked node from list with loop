'''
"'list' object has no attribute 'val'" the comment trouble out when i got list into solution
why I'd looked for this trouble. I checked this problems at python complier but it didn't work and I knew needed were codes that above value in list to linked nodes. 
i needed nodes like node1; 2->4->3 turned from l1 = [2,4,3] Likewise l2 = [5,6,4]

below is the reason why you have to turn the list to nodes at compiler
Code challenge sites like LeetCode, turn the JSON-like input into linked lists for you before calling your solution code. 
So when you want to run your code locally, outside that framework, you'll have to convert these standard lists to linked lists first, 
and after you run the code, you'll have to turn the returned linked list back to something printable as well:
https://stackoverflow.com/questions/72597517/attributeerror-list-object-has-no-attribute-val-in-linked-list-leetcode-cha


I referred to concept from below to know linking node from list(or dict) when I were solving 2. Add Two Numbers from leetcode 
https://stackoverflow.com/questions/35695708/python-is-it-possible-to-generate-nodes-in-a-loop    generate nodes in a loop? 
let's get started! 
'''

def make_nodes(n):
    nodes = []
    nodes.append(Node(0,None))    # head node
    for i in range(1, n):
        nodes.append(Node(i, None))
        nodes[i-1].next = nodes[i]    #somehow link them          
    return nodes

nodes = make_nodes()
head = nodes[0]
second = nodes[1]
last = nodes[-1]


nodes = [Node(i) for i in range(n)]
for node in nodes:
    print(node.payload)



#still maintaining... due to this old military computer down. my written code flew away.
#let's start again

class node():
    def __init__(self,data):
        self.data=data
        self.next=None

def traverse(head):
    currentnode=head
    while currentnode:
        print(currentnode.data,end="->")
        currentnode=currentnode.next
    print("null")

def insertdataatposition(head,data,position):
    if position==1:
        head.next=node(data)
        return head.next
    current=head
    newnode=node(data)
    for _ in range(position-2):
        if current.next==None:
            break
        current=current.next
    current.next=newnode(data).next
    current.next=newnode(data)

#below codes are today's essential parts!
def linkingnodefromlist(list):
    nodesinlist=[node(list[0])]  #list[0] is nodehead 
    for i,j in enumerate(list[1::]):  #[1::] the reason of 1 is due to above line nodehead already written
        nodesinlist.append(node(j))  
        nodesinlist[i-1].next=nodesinlist[i]  # nodesinlist[list[i-1]].next=nodesinlist[list[i]] left code not stored, deleted during iterating.so make nodesinlist out of loop for storing 
    nodesinlist[-2].next=nodesinlist[-1]  #due to enumerate(list[1::]) nodesinlist full filled with list[j] but i isn't due to starting from 1 so last node linking like this
    return nodesinlist


l1 = [2,4,3]
l2 = [5,6,4]
node1=linkingnodefromlist(l1)
node2=linkingnodefromlist(l2)
head1=node1[0]
head2=node2[0]
traverse(head1)
traverse(head2)

#and now you can use these codes to 2. Add Two Numbers in leetcode 
#https://leetcode.com/problems/add-two-numbers/description/
#https://www.geeksforgeeks.org/add-two-numbers-represented-by-linked-list/   and you can refer to a similar article, I found it a moment ago.


#Kindson neetcode technode  Peter Norvig's code
