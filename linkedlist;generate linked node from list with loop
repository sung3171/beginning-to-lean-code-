#generate nodes in a loop? 
#https://stackoverflow.com/questions/35695708/python-is-it-possible-to-generate-nodes-in-a-loop
'''
I refer below to know linking node from list(or dict) when I were solving 2. Add Two Numbers from leetcode 
like node1; 2->4->3 from l1 = [2,4,3] Likewise l2 = [5,6,4] 
why I'd looked for this trouble. I checked this problems at python complier but it didn't work and I knew above code was needed. 
'''

def make_nodes(n):
    nodes = []
    nodes.append(Node(0,None))    # head node
    for i in range(1, n):
        nodes.append(Node(i, None))
        nodes[i-1].next = nodes[i]    #somehow link them          
    return nodes

nodes = make_nodes()
head = nodes[0]
second = nodes[1]
last = nodes[-1]


nodes = [Node(i) for i in range(n)]
for node in nodes:
    print(node.payload)



#still maintaining... due to this old military computer down. my written code flew away.
#let's start again

Class node:
    def __init__(self,data):
        self.data=data
        sefl.next=None

def traverse(head):
    currentnode=head
    while currentnode:
        print(currentnode.data,end="->")
        head=head.next
    print("null")

def insertdataatposition(head,data,position)
    if position==1:
        return head.next=node(data)
    current=head
    newnode=node(data)
    for _ in range(position-2):
        if current.next==None:
            break
        current=current.next
    current.next=newnode(data).next
    current.next=newnode(data)

#above code is basic traverse and insertdataatposition

def linkingnodefromlist(list):
    newnode=[list[0]]  #list[0] is nodehead 
    for i,j in enumerate(list[1::])  #[1::] the reason of 1 is due to above line nodehead already written
        newnode.append(j)  
        newnode[i-1].next=newnode[i]  # newnode[list[i-1]].next=newnode[list[i]] left code not stored, deleted during iterating.so make newnode out of loop for storing 
    node[-2].next=node[-1]  #due to enumerate(list[1::]) newnode full filled with list[j] but i isn't due to starting from 1 so last node linking like this
    return newnode



