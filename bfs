#https://www.geeksforgeeks.org/shortest-path-in-grid-with-obstacles/
Shortest path in grid with obstacles

from collections import deque
 
def possiblePath(n, m, grid):
    # Check if the source or destination cell is blocked
    if grid[0][0] == 1 or grid[n - 1][m - 1] == 1:
        # Return -1 to indicate no path
        return -1
 
    # Create a queue to store the cells to explore
    q = deque()
    # Add the source cell to the queue and mark its distance as 0
    q.append((0, 0))
 
    # Define two arrays to represent the four directions of movement
    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]
 
    # Create a 2D list to store the distance of each cell from the source
    dis = [[-1 for _ in range(m)] for _ in range(n)]
 
    # Set the distance of the source cell as 0
    dis[0][0] = 0
 
    # Loop until the queue is empty or the destination is reached
    while q:
        # Get the front cell from the queue and remove it
        p = q.popleft()
 
        # Loop through the four directions of movement
        for i in range(4):
            # Calculate the coordinates of the neighboring cell
            x = p[0] + dx[i]
            y = p[1] + dy[i]
            # Check if the neighboring cell is inside the grid and not visited before
            if 0 <= x < n and 0 <= y < m and dis[x][y] == -1:
                # Check if the neighboring cell is free or special
                if grid[x][y] == 0 or grid[x][y] == 2:
                    # Set the distance of the neighboring cell as one more than the current cell
                    dis[x][y] = dis[p[0]][p[1]] + 1
                    # Add the neighboring cell to the queue for further exploration
                    q.append((x, y))
                # Check if the neighboring cell is special
                if grid[x][y] == 2:
                    # Loop through the four directions of movement again
                    for j in range(4):
                        # Calculate the coordinates of the adjacent cell
                        xx = x + dx[j]
                        yy = y + dy[j]
                        # Check if the adjacent cell is inside the grid
                        if 0 <= xx < n and 0 <= yy < m:
                            # Check if the adjacent cell is blocked
                            if grid[xx][yy] == 1:
                                # Change the adjacent cell to free
                                grid[xx][yy] = 0
 
    # Return the distance of the destination cell from the source
    return dis[n - 1][m - 1]
 
# Driver code
if __name__ == "__main__":
    n = 3
    m = 4
    grid = [
        [0, 1, 2, 1],
        [2, 1, 0, 0],
        [0, 2, 1, 0]
    ]
 
    result = possiblePath(n, m, grid)
 
    # Function Call
    print(result)






#https://www.geeksforgeeks.org/breadth-first-search-or-bfs-for-a-graph/
from collections import deque

# BFS from given source s
def bfs(adj, s, visited):
  
    # Create a queue for BFS
    q = deque()

    # Mark the source node as visited and enqueue it
    visited[s] = True
    q.append(s)

    # Iterate over the queue
    while q:
      
        # Dequeue a vertex from queue and print it
        curr = q.popleft()
        print(curr, end=" ")

        # Get all adjacent vertices of the dequeued 
        # vertex. If an adjacent has not been visited, 
        # mark it visited and enqueue it
        for x in adj[curr]:
            if not visited[x]:
                visited[x] = True
                q.append(x)

# Function to add an edge to the graph
def add_edge(adj, u, v):
    adj[u].append(v)
    adj[v].append(u)

# Example usage
if __name__ == "__main__":
  
    # Number of vertices in the graph
    V = 5

    # Adjacency list representation of the graph
    adj = [[] for _ in range(V)]

    # Add edges to the graph
    add_edge(adj, 0, 1)
    add_edge(adj, 0, 2)
    add_edge(adj, 1, 3)
    add_edge(adj, 1, 4)
    add_edge(adj, 2, 4)

    # Mark all the vertices as not visited
    visited = [False] * V

    # Perform BFS traversal starting from vertex 0
    print("BFS starting from 0: ")
    bfs(adj, 0, visited)



from collections import deque

# BFS from given source s
def bfs(adj, s, visited):
  
    q = deque() # Create a queue for BFS

    # Mark the source node as visited and enqueue it
    visited[s] = True
    q.append(s)

    # Iterate over the queue
    while q:
        curr = q.popleft() # Dequeue a vertex
        print(curr, end=" ")

        # Get all adjacent vertices of curr
        for x in adj[curr]:
            if not visited[x]:
                visited[x] = True # Mark as visited
                q.append(x) # Enqueue it

# Function to add an edge to the graph
def add_edge(adj, u, v):
    adj[u].append(v)
    adj[v].append(u) # Undirected graph

# Perform BFS for the entire graph
def bfs_disconnected(adj):
    visited = [False] * len(adj) # Not visited

    for i in range(len(adj)):
        if not visited[i]:
            bfs(adj, i, visited)

# Example usage
V = 6 # Number of vertices
adj = [[] for _ in range(V)] # Adjacency list

# Add edges to the graph
add_edge(adj, 0, 1)
add_edge(adj, 0, 2)
add_edge(adj, 3, 4)
add_edge(adj, 4, 5)

# Perform BFS traversal for the entire graph
bfs_disconnected(adj)







#https://www.youtube.com/watch?v=HZ5YTanv5QE
def bfs(graph, node):
    visited=[]
    queue=[]
    visited.append(node)
    queue.append(node)
    while queue:
    s=queue.pop(0)
    print(s,end=" ")
    for n in graph[s]:
        if n not in visited:
            visited.append(n)
            queue.append(n)
            
#time complexity O(|V|+|E|)


#https://www.youtube.com/watch?v=CnECo0rUbzo
def bfs(g,root):
    queue=collections.dequeu([root])
    visited=[]
    while queue:
        node=queue.popleft()
        if node not in visited:
            visited.append(node)
        for item in g[node]:
            if item not in visited:
                queue.append(item)
    print(visited)
bfs(graph,'a')


