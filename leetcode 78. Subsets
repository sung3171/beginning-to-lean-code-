leetcode 78. Subsets


txt = "The binary version of {0} is {0:b}"
print(txt.format(5))
>>> "{0:b}".format(37)
'100101'
>>> x, y, z = 1, 2, 3
>>> f'{x} {y} {2*z}'
'1 2 6'
You can request binary as well:
>>> f'{z:b}'
'11'
Specify the width:
>>> f'{z:8b}'
'      11'
Request zero padding:
f'{z:08b}'
'00000011'
And add common prefix to signify binary number:
>>> f'0b{z:08b}'
'0b00000011'
You can also let Python add the prefix for you but I do not like it so much as the version above because you have to take the prefix into width consideration:
>>> f'{z:#010b}'
'0b00000011'
binary(5)
>>> bin(6)
'0b110'
and when to erase the '0b', I use this:
>>> bin(6)[2:]
'110'
#https://stackoverflow.com/questions/10411085/converting-integer-to-binary-in-python
#https://stackoverflow.com/questions/699866/convert-int-to-binary-string-in-python


#returns 1 if both bits are 1: else it returns 0. you can check with below
for a in range(16):
    for b in range(a+1,16):
        sum = bin(a + b)
        print(a,b,bin(a)[2:],bin(b)[2:],sum[2:])
        if a & b:
            print('check')
'''
https://youtu.be/F_UIOvfmsew?si=jt3g6qw0CgxUUKQw&t=360  Bitwise Operators in Python (Part 1)
returns 1 if both bits are 1: else it returns 0. at least both bits are 1 you can pass the if condition. 
ex)1100 & 100, 1010 & 10, 1011 & 1, 1011 & 11 all can pass the if condition. you can check with below

essential; now I know & operator just check both bits at same column are 1. if these are 1, it can be true,pass.
'''

class Solution:
    def subsets(nums):
        n = len(nums)
        result = []
        for i in range(1 << n):
            subset = []
            for j in range(n):
                if i & (1 << j):
                    print(i,j,2**j,bin(i),bin(2**j),bin(i+2**j))
                    subset.append(nums[j])
            result.append(subset)
        return result
nums = [1,2,3]
a=Solution
a.subsets(nums)
print(a)



