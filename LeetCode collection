9. Palindrome Number
class Solution:
    def isPalindrome(self,x:int)->bool:
        if x<0:
            return print(False)
        temp=x
        reverse=0
        while temp>0:
            reverse=reverse*10+temp%10
            temp//=10
        return print(reverse==x)


x = 123121321
a=Solution()
a.isPalindrome(x)
print(a)

The time complexity of this solution is O(log(x)) because the while loop runs for the number of digits in the input number 'x'. 
The space complexity is O(1) because only a constant amount of extra space is used regardless of the input size.

class Solution:
    def isPalindrome(self,x):
        if  x<0 or (x!=0 and x%10==0): #I think they write it to be done before iterating.
            return print(False)
        reverse=0
        while x>reverse:
            reverse=reverse*10+x%10
            x//=10
        return print(reverse==x or x==reverse//10)


x = 12321
a=Solution()
a.isPalindrome(x)
print(a)

The time complexity of this solution is O(log(x)) because the while loop runs until x is reduced to half its size, which is equivalent to the number of digits in x. 
The space complexity is O(1) because only a constant amount of extra space is used regardless of the input size.
