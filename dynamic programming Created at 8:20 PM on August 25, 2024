It's 8:20pm August 25, 2024.
https://leetcode.com/problems/regular-expression-matching/description/  10. Regular Expression Matching
"i guess you could call this backtracking or you could call it uh whatever else you wanted i'm just going to call it dfs"
I think backtracking and DFS are similar concepts and can be used interchangeably. Call it whatever you want, whether it's DFS or backtracking
https://www.youtube.com/watch?v=HAA8mgxlov8  Regular Expression Matching - Dynamic Programming Top-Down Memoization - Leetcode 10
https://www.youtube.com/watch?v=_i4Yxeh5ceQ  Dynamic Programming 1D - Full Course - Python
https://www.youtube.com/watch?v=qMky6D6YtXU  Dynamic Programming 2D - Full Course - Python

It's 17:54 August 30, 2024. I just copy the code below for studying.
It's 11:15? August 31, 2024. I took naps while studying,It's 17:06 August 31, 2024. 
class solution:
    def ismatch(self,s,p):
        cache={}
        def dfs(i,j):
            if (i,j) in cache:
                return cache[(i,j)]
            if i >= len(s) and j >= len(p):
                return True
            if j >= len(p):
                return False
            match=i<len(s) and (s[i]==p[j] or p[j]==".")
            if (j+1) < len(p) and p[j+1]=="*":
#In a tuple, the or operator will return True if at least one is True. on the other hand, the and operator requires both sides True, if you want to get a True.
                cache[(i,j)]=(dfs(i,j+2) or (match and dfs(i+1,j)))  
                return cache[(i,j)]
            if match:
                cache[(i,j)]=dfs(i+1,j+1)
                return cache[(i,j)]
            cache[(i,j)]=False
            return False
        return dfs(0,0)

s = "aab"
p = "a*b"
a=solution()
a.ismatch(s,p)
print(a)

s = "bbc"
p = "a*b*c"
a=solution()
a.ismatch(s,p)
print(a)



https://www.youtube.com/watch?v=Ua0GhsJSlWM  Longest Common Subsequence - Dynamic Programming - Leetcode 1143
https://www.youtube.com/watch?v=Yan0cv2cLy8  Jump Game - Greedy - Leetcode 55
https://www.youtube.com/watch?v=H9bfqozjoqs  Coin Change - Dynamic Programming Bottom Up - Leetcode 322
https://www.youtube.com/watch?v=Y0lT9Fck7qI  Climbing Stairs - Dynamic Programming - Leetcode 70 - Python
https://www.youtube.com/watch?v=73r3KWiEvyk  House Robber - Leetcode 198 - Python Dynamic Programming

It starts at 13:38 on September 1, 2024.
class solution:
    def longestcommonsubsequence(self,text1,text2):
        dp=[[0 for j in range(len(text2)+1)] for i in range(len(text1)+1)]
        for i in range(len(text1)-1,-1,-1):
            for j in range(len(text2)-1,-1,-1):
                if text1[i]==text2[j]:
                    dp[i][j]= 1+dp[i+1][j+1]
                else:
                    dp[i][j]=max(dp[i+1][j],dp[i][j+1])
        return dp[0][0]
text1 = "abcde"
text2 = "ace" 
a=solution()
a.longestcommonsubsequence(text1,text2)
print(a)






