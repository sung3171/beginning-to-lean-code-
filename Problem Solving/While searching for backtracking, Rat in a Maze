I found it while I was searching for backtracking. It helped me understand what backtracking is.
Planning to look into it more.

https://www.geeksforgeeks.org/rat-in-a-maze/


# Initialize a string direction which represents all the directions.
direction = "RULD" 

# Arrays to represent change in rows and columns
dr = [0, -1, 0, 1]
dc = [1, 0, -1, 0]

# Function to check if cell(row, col) is inside the maze
# and unblocked


def is_valid(row, col, n, maze):
    return 0 <= row < n and 0 <= col < n and maze[row][col] == 1

# Function to get all valid paths


def find_path(row, col, maze, n, ans, current_path):
    # If we reach the bottom right cell of the matrix, add
    # the current path to ans and return
    if row == n - 1 and col == n - 1:
        ans.append(current_path)
        return
    # Mark the current cell as blocked
    maze[row][col] = 0

    for i in range(4):
        # Find the next row based on the current row (row)
        # and the dr[] array
        next_row = row + dr[i]
        # Find the next column based on the current column
        # (col) and the dc[] array
        next_col = col + dc[i]

        # Check if the next cell is valid or not
        if is_valid(next_row, next_col, n, maze):
            current_path += direction[i]
            # Recursively call the find_path function for
            # the next cell
            find_path(next_row, next_col, maze, n, ans, current_path)
            # Remove the last direction when backtracking
            current_path = current_path[:-1]

    # Mark the current cell as unblocked
    maze[row][col] = 1


# Driver code
maze = [
    [1, 0, 0, 0],
    [1, 1, 0, 1],
    [1, 1, 0, 0],
    [0, 1, 1, 1]
]

n = len(maze)
# List to store all the valid paths
result = []
# Store current path
current_path = ""

if maze[0][0] != 0 and maze[n - 1][n - 1] != 0:
    # Function call to get all valid paths
    find_path(0, 0, maze, n, result, current_path)

if not result:
    print(-1)
else:
    print(" ".join(result))

Now, let's start by understanding how it works! 
The main point I learned is that there are four directions: up, down, left, and right. 
To understand this well, in my opinion, we should think about it as counterclockwise. 
First, we start at the (0,0) point and check where we are going next. 
We iterate a total of four times, checking in the counterclockwise direction: right, up, left, and down.
First, to move to the right, since 1 is a path, we can move immediately to the right. 
Before moving left spot 1 to 0, and before we enter recursion, we already consume i=0 (right). 
(Later, when we backtrack(come out of recursion), we will consume all remaining directions: i=1 (up), i=2 (left), and i=3 (down).)
 We can use this method to move up to the target point (4,4). 
After coming out of recursion, we will consume the left direction i to find another path until we return to the starting point. 
When we exit recursion, the spot is converted from 0 (wall) to 1 (path). 
Finally, we find two paths: 'DRDDRR' and 'DDRDRR', and the maze remains as it originally was.
maze = [
    [1, 0, 0, 0],
    [1, 1, 0, 1],
    [1, 1, 0, 0],
    [0, 1, 1, 1]
] 
Start with D -> DR -> DRD -> DRDD -> ... -> DRDDRR and then exit the recursion. 
From DRDDRR, we backtrack to DRDDR -> DRDD -> DRDL -> DRD -> DR -> D -> DD -> DDR -> DDRD -> DDRDR -> DDRDRR. 
After coming out of recursion one more time, we have consumed almost all directions i, leaving 1 for another possible path, which allows us to reach the goal without exceptions. 

This is how and why the code is constructed and was created!



